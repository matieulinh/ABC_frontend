{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\frontend\\\\src\\\\pages\\\\Login.jsx\";\nimport { useRef, useState, useEffect, useContext } from 'react';\nimport AuthContext from \"../context/AuthProvider\";\nimport axios from '../api/axios';\nimport Helmet from \"../components/Helmet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOGIN_URL = '/auth';\n\nconst Login = () => {\n  return /*#__PURE__*/_jsxDEV(Helmet, {\n    title: \"User\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Hello!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 7\n  }, this);\n}; // const Login = () => {\n//     const { setAuth } = useContext(AuthContext);\n//     const userRef = useRef();\n//     const errRef = useRef();\n//     const [user, setUser] = useState('');\n//     const [pwd, setPwd] = useState('');\n//     const [errMsg, setErrMsg] = useState('');\n//     const [success, setSuccess] = useState(false);\n//     useEffect(() => {\n//         userRef.current.focus();\n//     }, [])\n//     useEffect(() => {\n//         setErrMsg('');\n//     }, [user, pwd])\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             const response = await axios.post(LOGIN_URL,\n//                 JSON.stringify({ user, pwd }),\n//                 {\n//                     headers: { 'Content-Type': 'application/json' },\n//                     withCredentials: true\n//                 }\n//             );\n//             console.log(JSON.stringify(response?.data));\n//             //console.log(JSON.stringify(response));\n//             const accessToken = response?.data?.accessToken;\n//             const roles = response?.data?.roles;\n//             setAuth({ user, pwd, roles, accessToken });\n//             setUser('');\n//             setPwd('');\n//             setSuccess(true);\n//         } catch (err) {\n//             if (!err?.response) {\n//                 setErrMsg('No Server Response');\n//             } else if (err.response?.status === 400) {\n//                 setErrMsg('Missing Username or Password');\n//             } else if (err.response?.status === 401) {\n//                 setErrMsg('Unauthorized');\n//             } else {\n//                 setErrMsg('Login Failed');\n//             }\n//             errRef.current.focus();\n//         }\n//     }\n//     return (\n//         <>\n//             {success ? (\n//                 <section>\n//                     <h1>You are logged in!</h1>\n//                     <br />\n//                     <p>\n//                         <a href=\"#\">Go to Home</a>\n//                     </p>\n//                 </section>\n//             ) : (\n//                 <section>\n//                     <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\n//                     <h1>Sign In</h1>\n//                     <form onSubmit={handleSubmit}>\n//                         <label htmlFor=\"username\">Username:</label>\n//                         <input\n//                             type=\"text\"\n//                             id=\"username\"\n//                             ref={userRef}\n//                             autoComplete=\"off\"\n//                             onChange={(e) => setUser(e.target.value)}\n//                             value={user}\n//                             required\n//                         />\n//                         <label htmlFor=\"password\">Password:</label>\n//                         <input\n//                             type=\"password\"\n//                             id=\"password\"\n//                             onChange={(e) => setPwd(e.target.value)}\n//                             value={pwd}\n//                             required\n//                         />\n//                         <button>Sign In</button>\n//                     </form>\n//                     <p>\n//                         Need an Account?<br />\n//                         <span className=\"line\">\n//                             {/*put router link here*/}\n//                             <a href=\"#\">Sign Up</a>\n//                         </span>\n//                     </p>\n//                 </section>\n//             )}\n//         </>\n//     )\n// }\n\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useRef","useState","useEffect","useContext","AuthContext","axios","Helmet","LOGIN_URL","Login"],"sources":["C:/Users/HP/Desktop/frontend/src/pages/Login.jsx"],"sourcesContent":["import { useRef, useState, useEffect, useContext } from 'react';\r\nimport AuthContext from \"../context/AuthProvider\";\r\n\r\nimport axios from '../api/axios';\r\nimport Helmet from \"../components/Helmet\";\r\nconst LOGIN_URL = '/auth';\r\n\r\nconst Login = () => {\r\n    return (\r\n      <Helmet title=\"User\">\r\n        {/* hero slider */}\r\n        <p>Hello!</p>\r\n        {/* end hero slider */}\r\n      </Helmet>\r\n    );\r\n};\r\n// const Login = () => {\r\n//     const { setAuth } = useContext(AuthContext);\r\n//     const userRef = useRef();\r\n//     const errRef = useRef();\r\n\r\n//     const [user, setUser] = useState('');\r\n//     const [pwd, setPwd] = useState('');\r\n//     const [errMsg, setErrMsg] = useState('');\r\n//     const [success, setSuccess] = useState(false);\r\n\r\n//     useEffect(() => {\r\n//         userRef.current.focus();\r\n//     }, [])\r\n\r\n//     useEffect(() => {\r\n//         setErrMsg('');\r\n//     }, [user, pwd])\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n\r\n//         try {\r\n//             const response = await axios.post(LOGIN_URL,\r\n//                 JSON.stringify({ user, pwd }),\r\n//                 {\r\n//                     headers: { 'Content-Type': 'application/json' },\r\n//                     withCredentials: true\r\n//                 }\r\n//             );\r\n//             console.log(JSON.stringify(response?.data));\r\n//             //console.log(JSON.stringify(response));\r\n//             const accessToken = response?.data?.accessToken;\r\n//             const roles = response?.data?.roles;\r\n//             setAuth({ user, pwd, roles, accessToken });\r\n//             setUser('');\r\n//             setPwd('');\r\n//             setSuccess(true);\r\n//         } catch (err) {\r\n//             if (!err?.response) {\r\n//                 setErrMsg('No Server Response');\r\n//             } else if (err.response?.status === 400) {\r\n//                 setErrMsg('Missing Username or Password');\r\n//             } else if (err.response?.status === 401) {\r\n//                 setErrMsg('Unauthorized');\r\n//             } else {\r\n//                 setErrMsg('Login Failed');\r\n//             }\r\n//             errRef.current.focus();\r\n//         }\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             {success ? (\r\n//                 <section>\r\n//                     <h1>You are logged in!</h1>\r\n//                     <br />\r\n//                     <p>\r\n//                         <a href=\"#\">Go to Home</a>\r\n//                     </p>\r\n//                 </section>\r\n//             ) : (\r\n//                 <section>\r\n//                     <p ref={errRef} className={errMsg ? \"errmsg\" : \"offscreen\"} aria-live=\"assertive\">{errMsg}</p>\r\n//                     <h1>Sign In</h1>\r\n//                     <form onSubmit={handleSubmit}>\r\n//                         <label htmlFor=\"username\">Username:</label>\r\n//                         <input\r\n//                             type=\"text\"\r\n//                             id=\"username\"\r\n//                             ref={userRef}\r\n//                             autoComplete=\"off\"\r\n//                             onChange={(e) => setUser(e.target.value)}\r\n//                             value={user}\r\n//                             required\r\n//                         />\r\n\r\n//                         <label htmlFor=\"password\">Password:</label>\r\n//                         <input\r\n//                             type=\"password\"\r\n//                             id=\"password\"\r\n//                             onChange={(e) => setPwd(e.target.value)}\r\n//                             value={pwd}\r\n//                             required\r\n//                         />\r\n//                         <button>Sign In</button>\r\n//                     </form>\r\n//                     <p>\r\n//                         Need an Account?<br />\r\n//                         <span className=\"line\">\r\n//                             {/*put router link here*/}\r\n//                             <a href=\"#\">Sign Up</a>\r\n//                         </span>\r\n//                     </p>\r\n//                 </section>\r\n//             )}\r\n//         </>\r\n//     )\r\n// }\r\n\r\nexport default Login"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AAEA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;;AACA,MAAMC,SAAS,GAAG,OAAlB;;AAEA,MAAMC,KAAK,GAAG,MAAM;EAChB,oBACE,QAAC,MAAD;IAAQ,KAAK,EAAC,MAAd;IAAA,uBAEE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAFF;IAAA;IAAA;IAAA;EAAA,QADF;AAOH,CARD,C,CASA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KA3GMA,K;AA6GN,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}